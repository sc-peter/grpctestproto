// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HelloWorldUserService_SayHello_FullMethodName = "/helloworld.HelloWorldUserService/SayHello"
)

// HelloWorldUserServiceClient is the client API for HelloWorldUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldUserServiceClient interface {
	SayHello(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
}

type helloWorldUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldUserServiceClient(cc grpc.ClientConnInterface) HelloWorldUserServiceClient {
	return &helloWorldUserServiceClient{cc}
}

func (c *helloWorldUserServiceClient) SayHello(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, HelloWorldUserService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloWorldUserServiceServer is the server API for HelloWorldUserService service.
// All implementations must embed UnimplementedHelloWorldUserServiceServer
// for forward compatibility
type HelloWorldUserServiceServer interface {
	SayHello(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	mustEmbedUnimplementedHelloWorldUserServiceServer()
}

// UnimplementedHelloWorldUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWorldUserServiceServer struct {
}

func (UnimplementedHelloWorldUserServiceServer) SayHello(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloWorldUserServiceServer) mustEmbedUnimplementedHelloWorldUserServiceServer() {}

// UnsafeHelloWorldUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldUserServiceServer will
// result in compilation errors.
type UnsafeHelloWorldUserServiceServer interface {
	mustEmbedUnimplementedHelloWorldUserServiceServer()
}

func RegisterHelloWorldUserServiceServer(s grpc.ServiceRegistrar, srv HelloWorldUserServiceServer) {
	s.RegisterService(&HelloWorldUserService_ServiceDesc, srv)
}

func _HelloWorldUserService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldUserServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloWorldUserService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldUserServiceServer).SayHello(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloWorldUserService_ServiceDesc is the grpc.ServiceDesc for HelloWorldUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorldUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.HelloWorldUserService",
	HandlerType: (*HelloWorldUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloWorldUserService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

const (
	HelloWorldAdminService_SayHello_FullMethodName = "/helloworld.HelloWorldAdminService/SayHello"
)

// HelloWorldAdminServiceClient is the client API for HelloWorldAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldAdminServiceClient interface {
	SayHello(ctx context.Context, in *HelloWorldAdminRequest, opts ...grpc.CallOption) (*HelloWorldAdminResponse, error)
}

type helloWorldAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldAdminServiceClient(cc grpc.ClientConnInterface) HelloWorldAdminServiceClient {
	return &helloWorldAdminServiceClient{cc}
}

func (c *helloWorldAdminServiceClient) SayHello(ctx context.Context, in *HelloWorldAdminRequest, opts ...grpc.CallOption) (*HelloWorldAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloWorldAdminResponse)
	err := c.cc.Invoke(ctx, HelloWorldAdminService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloWorldAdminServiceServer is the server API for HelloWorldAdminService service.
// All implementations must embed UnimplementedHelloWorldAdminServiceServer
// for forward compatibility
type HelloWorldAdminServiceServer interface {
	SayHello(context.Context, *HelloWorldAdminRequest) (*HelloWorldAdminResponse, error)
	mustEmbedUnimplementedHelloWorldAdminServiceServer()
}

// UnimplementedHelloWorldAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWorldAdminServiceServer struct {
}

func (UnimplementedHelloWorldAdminServiceServer) SayHello(context.Context, *HelloWorldAdminRequest) (*HelloWorldAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloWorldAdminServiceServer) mustEmbedUnimplementedHelloWorldAdminServiceServer() {
}

// UnsafeHelloWorldAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldAdminServiceServer will
// result in compilation errors.
type UnsafeHelloWorldAdminServiceServer interface {
	mustEmbedUnimplementedHelloWorldAdminServiceServer()
}

func RegisterHelloWorldAdminServiceServer(s grpc.ServiceRegistrar, srv HelloWorldAdminServiceServer) {
	s.RegisterService(&HelloWorldAdminService_ServiceDesc, srv)
}

func _HelloWorldAdminService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldAdminServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloWorldAdminService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldAdminServiceServer).SayHello(ctx, req.(*HelloWorldAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloWorldAdminService_ServiceDesc is the grpc.ServiceDesc for HelloWorldAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorldAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.HelloWorldAdminService",
	HandlerType: (*HelloWorldAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloWorldAdminService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}
